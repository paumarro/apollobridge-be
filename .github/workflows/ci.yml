name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23.8

      - name: Cache Go Modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install Dependencies
        run: go mod tidy

      - name: Run Unit Tests
        run: go test ./... -v -short

  security:
    name: Run Security Scans
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23.8

      - name: Install Gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@latest

      - name: Run Gosec
        run: gosec ./...

      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Run govulncheck
        run: govulncheck ./...

  integration-db:
    name: Integration Tests (Database)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Optional: cache Docker layers to speed up builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env.docker
        run: |
          cat > .env.docker <<'EOF'
          ART_DB_URL=${{ secrets.ART_DB_URL }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          KEYCLOAK_ADMIN=${{ secrets.KEYCLOAK_ADMIN }}
          KEYCLOAK_ADMIN_PASSWORD=${{ secrets.KEYCLOAK_ADMIN_PASSWORD }}
          EOF

      # Build only what's needed and run the DB tests service
      - name: Run database integration tests
        run: |
          docker compose -p ci -f docker-compose.yml up --build --exit-code-from test-database test-database
      - name: Teardown
        if: always()
        run: docker compose -p ci -f docker-compose.yml down -v

  integration-middleware:
    name: Integration Tests (Middleware)
    runs-on: ubuntu-latest
    # Run in parallel with DB tests (or add "needs: integration-db" if you prefer sequence)
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env.docker
        run: |
          cat > .env.docker <<'EOF'
          ART_DB_URL=${{ secrets.ART_DB_URL }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          KEYCLOAK_ADMIN=${{ secrets.KEYCLOAK_ADMIN }}
          KEYCLOAK_ADMIN_PASSWORD=${{ secrets.KEYCLOAK_ADMIN_PASSWORD }}
          EOF

      - name: Run middleware integration tests
        run: |
          docker compose -p ci -f docker-compose.yml up --build --exit-code-from test-middleware test-middleware
      - name: Teardown
        if: always()
        run: docker compose -p ci -f docker-compose.yml down -v
