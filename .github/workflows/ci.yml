name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.x

      # Step 3: Install dependencies
      - name: Install Dependencies
        run: go mod tidy

      # Step 4: Run unit tests (excluding integration tests)
      - name: Run Unit Tests
        run: go test $(go list ./... | grep -v integration_test) -v

  integration:
    name: Run Integration Tests with Docker Compose
    runs-on: ubuntu-latest
    env:
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass
      POSTGRES_DB: testdb
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin123
      ART_DB_URL: postgres://testuser:testpass@db:5432/testdb?sslmode=disable
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # Create .env.docker file with test environment variables
      - name: Create .env.docker
        run: |
          cat > .env.docker << 'EOF'
          POSTGRES_USER=testuser
          POSTGRES_PASSWORD=testpass
          POSTGRES_DB=testdb
          KEYCLOAK_ADMIN=admin
          KEYCLOAK_ADMIN_PASSWORD=admin123
          ART_DB_URL=postgres://testuser:testpass@db:5432/testdb?sslmode=disable
          RUNNING_IN_DOCKER=true
          EOF

      # Build and run integration tests with docker-compose
      - name: Build and run integration tests
        run: |
          docker compose up --build --exit-code-from test-integration --abort-on-container-exit

      # Show logs on failure for debugging
      - name: Show logs on failure
        if: failure()
        run: |
          echo "=== Database logs ==="
          docker compose logs db
          echo "=== Test container logs ==="
          docker compose logs test-integration

      # Always cleanup containers and volumes
      - name: Cleanup
        if: always()
        run: docker compose down -v

  security:
    name: Run Security Scans
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.x

      # Step 3: Install dependencies
      - name: Install Dependencies
        run: go mod tidy

      # Step 4: Install Gosec
      - name: Install Gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@latest

      # Step 5: Run Gosec
      - name: Run Gosec
        run: gosec ./...

      # Step 6: Install govulncheck
      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      # Step 7: Run govulncheck
      - name: Run govulncheck
        run: govulncheck ./...
