name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23.8  

      # Step 3: Install dependencies
      - name: Install Dependencies
        run: go mod tidy

      # Step 4: Run unit tests
      - name: Run Unit Tests
        run: go test ./... -v -short

  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Compose
      - name: Set up Docker Compose
        uses: docker/setup-buildx-action@v2

      # Step 3: Start services with Docker Compose
      - name: Start Services
        run: docker-compose up -d db

      # Step 4: Wait for Postgres to be ready
      - name: Wait for Database
        run: |
          for i in {1..10}; do
            if docker exec $(docker ps -qf "name=db") pg_isready -U $POSTGRES_USER; then
              echo "Database is ready";
              break;
            fi;
            echo "Waiting for database...";
            sleep 5;
          done

      # Step 5: Run integration tests
      - name: Run Integration Tests
        run: |
          docker-compose run --rm test-database
          docker-compose run --rm test-middleware

      # Step 6: Tear down services
      - name: Stop Services
        run: docker-compose down


  security:
    name: Run Security Scans
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23.8  

      # Step 3: Install Gosec
      - name: Install Gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@latest

      # Step 4: Run Gosec
      - name: Run Gosec
        run: gosec ./...

      # Step 5: Install govulncheck
      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      # Step 6: Run govulncheck
      - name: Run govulncheck
        run: govulncheck ./... 
  
